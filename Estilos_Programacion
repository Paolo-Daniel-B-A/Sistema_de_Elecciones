#PROGRAMACION DECLARARTIVA:

namespace Dominio.Votacion.entities {
  class Voto {
      private idVoto: number;
      private idVotante: number;
      private idCandidato: number;
      private validado: boolean;

    static obtenerVotosValidados(votos: Voto[]): Voto[] {
      return votos.filter((voto) => voto.validado);
    }
  }
}


#PROGRAMACION IMPERATIVA:

namespace Dominio.Votacion.entities {
  class Voto {
      private idVoto: number;
      private idVotante: number;
      private idCandidato: number;
      private validado: boolean;

    static contarVotos(votos: Voto[]): number {
      let totalVotos = 0;
      for (const voto of votos) {
        totalVotos++;
      }
      return totalVotos;
    }
  }
}

#PROGRAMACION ESTRUCTURADA:

namespace Dominio.Votacion.entities {
  class Voto {
      private idVoto: number;
      private idVotante: number;
      private idCandidato: number;
      private validado: boolean;

    static encontrarCandidatoMasVotado(votos: Voto[]): number | null {
      if (votos.length === 0) {
        return null;
      }

      let candidatoMasVotado = votos[0].idCandidato;
      let votosMasAltos = 0;

      for (const voto of votos) {
        const votosCandidato = votos.filter((v) => v.idCandidato === voto.idCandidato).length;
        if (votosCandidato > votosMasAltos) {
          votosMasAltos = votosCandidato;
          candidatoMasVotado = voto.idCandidato;
        }
      }

      return candidatoMasVotado;
    }
  }
}
